{"version":3,"sources":["webpack:///./src/pages/sign-up.tsx","webpack:///./src/components/Button.tsx"],"names":["SignUpForm","BoxForm","SignUpPage","useState","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","errorText","setErrorText","isLoading","setIsLoading","onSubmit","event","firebase","auth","createUserWithEmailAndPassword","then","navigate","catch","error","code","finally","preventDefault","className","htmlFor","disabled","type","value","onChange","target","id","aria-describedby","block","Button","onClick","children","blockValue","role"],"mappings":"kPAYA,IAAMA,EAAa,YAAOC,IAAP,sBAAH,2CAwGDC,UApGf,WAAsB,MACMC,mBAAS,IAA5BC,EADa,KACNC,EADM,OAEYF,mBAAS,IAAlCG,EAFa,KAEHC,EAFG,OAG0BJ,mBAAS,IAAhDK,EAHa,KAGIC,EAHJ,OAIcN,mBAAS,QAApCO,EAJa,KAIFC,EAJE,OAKcR,oBAAS,GAApCS,EALa,KAKFC,EALE,KAwCpB,OACE,8BACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAACb,EAAD,CAAYU,UAAWA,EAAWI,SA1B5C,SAA0BC,GACpBT,IAAaE,EACfG,EAAa,8EAEbE,GAAa,GACbG,IACGC,OACAC,+BAA+Bd,EAAOE,GACtCa,MAAK,WACJC,YAAS,QAEVC,OAAM,SAASC,GACdX,EAAaW,EAAMC,SAEpBC,SAAQ,WACPX,GAAa,OAGnBE,EAAMU,mBASI,mBAAKC,UAAU,cACb,qBAAOC,QAAQ,SAAf,iBACA,qBACEC,SAAUhB,EACViB,KAAK,QACLC,MAAO1B,EACP2B,SA7ChB,SAA2BhB,GACzBV,EAASU,EAAMiB,OAAOF,QA6CRJ,UAAU,eACVO,GAAG,QACHC,mBAAiB,cAEnB,qBAAOD,GAAG,YAAYP,UAAU,wBAAhC,mDAIF,mBAAKA,UAAU,cACb,qBAAOC,QAAQ,YAAf,YACA,qBACEC,SAAUhB,EACViB,KAAK,WACLC,MAAOxB,EACPyB,SAxDhB,SAA8BhB,GAC5BR,EAAYQ,EAAMiB,OAAOF,QAwDXJ,UAAU,eACVO,GAAG,cAGP,mBAAKP,UAAU,cACb,qBAAOC,QAAQ,oBAAf,oBACA,qBACEC,SAAUhB,EACViB,KAAK,WACLC,MAAOtB,EACPuB,SA/DhB,SAAqChB,GACnCN,EAAmBM,EAAMiB,OAAOF,QA+DlBJ,UAAU,eACVO,GAAG,sBASP,YAAC,IAAD,CAAQrB,UAAWA,EAAWiB,KAAK,SAASM,OAAK,GAAjD,kB,kCCzGd,qCA6BeC,IApBuB,SAAC,GAAkD,IAAhDC,EAAgD,EAAhDA,QAASC,EAAuC,EAAvCA,SAAU1B,EAA6B,EAA7BA,UAAWiB,EAAkB,EAAlBA,KAC/DU,EADiF,EAAZJ,MACxC,YAAc,GAEjD,OAEE,WADA,CACA,UAAQP,SAAUhB,EAAWyB,QAASA,EAASR,KAAMA,EAAMH,UAAS,mBAAqBa,GACtF3B,EACC,8BACE,mBAAKc,UAAU,8CAA8Cc,KAAK,UAChE,oBAAMd,UAAU,WAAhB,eAEF,wCALM,GAQLY","file":"component---src-pages-sign-up-tsx-01f5c7f763e9f0c3a910.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { ChangeEvent, FormEvent, useState } from 'react'\n\nimport firebase from 'firebase'\nimport { navigate } from 'gatsby'\nimport styled from '@emotion/styled'\nimport Page from '../components/Page'\nimport Container from '../components/Container'\nimport BoxForm from '../components/BoxForm'\nimport Button from '../components/Button'\nimport IndexLayout from '../layouts'\n\nconst SignUpForm = styled(BoxForm)`\n  margin-top: 50px;\n`\n\nfunction SignUpPage() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n  const [errorText, setErrorText] = useState('none')\n  const [isLoading, setIsLoading] = useState(false)\n\n  function handleEmailChange(event: ChangeEvent<HTMLInputElement>) {\n    setEmail(event.target.value)\n  }\n\n  function handlePasswordChange(event: ChangeEvent<HTMLInputElement>) {\n    setPassword(event.target.value)\n  }\n\n  function handleConfirmPasswordChange(event: ChangeEvent<HTMLInputElement>) {\n    setConfirmPassword(event.target.value)\n  }\n\n  function handleFormSubmit(event: FormEvent<HTMLFormElement>) {\n    if (password !== confirmPassword) {\n      setErrorText(\"Looks like your passwords don't match. Please double-check and try again.\")\n    } else {\n      setIsLoading(true)\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(email, password)\n        .then(() => {\n          navigate('/')\n        })\n        .catch(function(error) {\n          setErrorText(error.code)\n        })\n        .finally(() => {\n          setIsLoading(false)\n        })\n    }\n    event.preventDefault()\n  }\n\n  return (\n    <>\n      <IndexLayout>\n        <Page>\n          <Container>\n            <SignUpForm errorText={errorText} onSubmit={handleFormSubmit}>\n              <div className=\"form-group\">\n                <label htmlFor=\"email\">Email address</label>\n                <input\n                  disabled={isLoading}\n                  type=\"email\"\n                  value={email}\n                  onChange={handleEmailChange}\n                  className=\"form-control\"\n                  id=\"email\"\n                  aria-describedby=\"emailHelp\"\n                />\n                <small id=\"emailHelp\" className=\"form-text text-muted\">\n                  We'll never share your email with anyone else.\n                </small>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"password\">Password</label>\n                <input\n                  disabled={isLoading}\n                  type=\"password\"\n                  value={password}\n                  onChange={handlePasswordChange}\n                  className=\"form-control\"\n                  id=\"password\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"confirm-password\">Confirm Password</label>\n                <input\n                  disabled={isLoading}\n                  type=\"password\"\n                  value={confirmPassword}\n                  onChange={handleConfirmPasswordChange}\n                  className=\"form-control\"\n                  id=\"confirm-password\"\n                />\n              </div>\n              {/* <div className=\"form-group form-check\">\n                <input type=\"checkbox\" className=\"form-check-input\" id=\"exampleCheck1\" />\n                <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">\n                  Check me out\n                </label>\n              </div> */}\n              <Button isLoading={isLoading} type=\"submit\" block>\n                Sign Up\n              </Button>\n            </SignUpForm>\n          </Container>\n        </Page>\n      </IndexLayout>\n    </>\n  )\n}\n\nexport default SignUpPage\n","import React from 'react'\n\ninterface ButtonProps {\n  onClick?: () => void\n  isLoading: boolean\n  type: 'button' | 'reset' | 'submit'\n  block?: boolean\n}\n\nconst Button: React.FC<ButtonProps> = ({ onClick, children, isLoading, type, block }) => {\n  const blockValue: string = block ? 'btn-block' : ''\n\n  return (\n    // eslint-disable-next-line react/button-has-type\n    <button disabled={isLoading} onClick={onClick} type={type} className={`btn btn-primary ${blockValue}`}>\n      {isLoading ? (\n        <>\n          <div className=\"spinner-border spinner-border-sm text-light\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n          <span>&nbsp;Loading...</span>\n        </>\n      ) : (\n        `${children}`\n      )}\n    </button>\n  )\n}\n\nexport default Button\n"],"sourceRoot":""}